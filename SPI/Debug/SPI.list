
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000318  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  080004ac  080004ac  000014ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000014b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004b8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004b8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000055a  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001c4  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005f  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc89  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c61  00000000  00000000  0000f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f895  00000000  00000000  000105e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005fe76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  0005febc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0005fff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000494 	.word	0x08000494

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000494 	.word	0x08000494

080001d4 <main>:
#include <stm32f4xx.h>
#include "spi.h"


int main()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	int data = "A";
 80001da:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <main+0x28>)
 80001dc:	607b      	str	r3, [r7, #4]
	spi_gpio_init();
 80001de:	f000 f80f 	bl	8000200 <spi_gpio_init>
	spi1_config();
 80001e2:	f000 f863 	bl	80002ac <spi1_config>

	while(1)
	{
		cs_enable();
 80001e6:	f000 f8e7 	bl	80003b8 <cs_enable>
		spi1_transmit(&data, 1);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2101      	movs	r1, #1
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8aa 	bl	8000348 <spi1_transmit>
		cs_disable();
 80001f4:	f000 f8f0 	bl	80003d8 <cs_disable>
		cs_enable();
 80001f8:	bf00      	nop
 80001fa:	e7f4      	b.n	80001e6 <main+0x12>
 80001fc:	080004ac 	.word	0x080004ac

08000200 <spi_gpio_init>:
 * PA7 -> MOSI
 * PA9 -> Slave select
 */

void spi_gpio_init(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000204:	4b26      	ldr	r3, [pc, #152]	@ (80002a0 <spi_gpio_init+0xa0>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a25      	ldr	r2, [pc, #148]	@ (80002a0 <spi_gpio_init+0xa0>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*********** Set gpio alternate function ****************/
	/*PA5*/
	GPIOA->MODER &= ~(1U<<10);
 8000210:	4b24      	ldr	r3, [pc, #144]	@ (80002a4 <spi_gpio_init+0xa4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a23      	ldr	r2, [pc, #140]	@ (80002a4 <spi_gpio_init+0xa4>)
 8000216:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800021a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<11);
 800021c:	4b21      	ldr	r3, [pc, #132]	@ (80002a4 <spi_gpio_init+0xa4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a20      	ldr	r2, [pc, #128]	@ (80002a4 <spi_gpio_init+0xa4>)
 8000222:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000226:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &= ~(1U<<12);
 8000228:	4b1e      	ldr	r3, [pc, #120]	@ (80002a4 <spi_gpio_init+0xa4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1d      	ldr	r2, [pc, #116]	@ (80002a4 <spi_gpio_init+0xa4>)
 800022e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<13);
 8000234:	4b1b      	ldr	r3, [pc, #108]	@ (80002a4 <spi_gpio_init+0xa4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a1a      	ldr	r2, [pc, #104]	@ (80002a4 <spi_gpio_init+0xa4>)
 800023a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800023e:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &= ~(1U<<14);
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <spi_gpio_init+0xa4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a17      	ldr	r2, [pc, #92]	@ (80002a4 <spi_gpio_init+0xa4>)
 8000246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800024a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<15);
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <spi_gpio_init+0xa4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a14      	ldr	r2, [pc, #80]	@ (80002a4 <spi_gpio_init+0xa4>)
 8000252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000256:	6013      	str	r3, [r2, #0]

	/*PA9*/
	GPIOA->MODER |= (1U<<18);
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <spi_gpio_init+0xa4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a11      	ldr	r2, [pc, #68]	@ (80002a4 <spi_gpio_init+0xa4>)
 800025e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<19);
 8000264:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <spi_gpio_init+0xa4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0e      	ldr	r2, [pc, #56]	@ (80002a4 <spi_gpio_init+0xa4>)
 800026a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800026e:	6013      	str	r3, [r2, #0]

	/*Set gpio function type SPI*/
	/*CLK*/
	GPIOB->AFR[0] |= (5<<20);
 8000270:	4b0d      	ldr	r3, [pc, #52]	@ (80002a8 <spi_gpio_init+0xa8>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a0c      	ldr	r2, [pc, #48]	@ (80002a8 <spi_gpio_init+0xa8>)
 8000276:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800027a:	6213      	str	r3, [r2, #32]

	/*MISO*/
	GPIOB->AFR[0] |= (5<<24);
 800027c:	4b0a      	ldr	r3, [pc, #40]	@ (80002a8 <spi_gpio_init+0xa8>)
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	4a09      	ldr	r2, [pc, #36]	@ (80002a8 <spi_gpio_init+0xa8>)
 8000282:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8000286:	6213      	str	r3, [r2, #32]

	/*MOSI*/
	GPIOB->AFR[0] |= (5<<28);
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <spi_gpio_init+0xa8>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a06      	ldr	r2, [pc, #24]	@ (80002a8 <spi_gpio_init+0xa8>)
 800028e:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000292:	6213      	str	r3, [r2, #32]

}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020000 	.word	0x40020000
 80002a8:	40020400 	.word	0x40020400

080002ac <spi1_config>:

void spi1_config(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	 /*Enalbe clock access to SPI1 module*/
	RCC->APB2ENR |= SPI1EN;
 80002b0:	4b23      	ldr	r3, [pc, #140]	@ (8000340 <spi1_config+0x94>)
 80002b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002b4:	4a22      	ldr	r2, [pc, #136]	@ (8000340 <spi1_config+0x94>)
 80002b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002ba:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set clock to fPCLK/4*/
	SPI1->CR1 |= (1U<<3);
 80002bc:	4b21      	ldr	r3, [pc, #132]	@ (8000344 <spi1_config+0x98>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a20      	ldr	r2, [pc, #128]	@ (8000344 <spi1_config+0x98>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<4);
 80002c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <spi1_config+0x98>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000344 <spi1_config+0x98>)
 80002ce:	f023 0310 	bic.w	r3, r3, #16
 80002d2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<5);
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <spi1_config+0x98>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000344 <spi1_config+0x98>)
 80002da:	f023 0320 	bic.w	r3, r3, #32
 80002de:	6013      	str	r3, [r2, #0]

	/*Enable full duplex*/
	SPI1->CR1 &=~(1U<<10);
 80002e0:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <spi1_config+0x98>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a17      	ldr	r2, [pc, #92]	@ (8000344 <spi1_config+0x98>)
 80002e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002ea:	6013      	str	r3, [r2, #0]

	/*Set MSB first*/
	SPI1->CR1 &=~(1U<<7);
 80002ec:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <spi1_config+0x98>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a14      	ldr	r2, [pc, #80]	@ (8000344 <spi1_config+0x98>)
 80002f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002f6:	6013      	str	r3, [r2, #0]

	/*Set master mode*/
	SPI1->CR1 |= (1U<<2);
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <spi1_config+0x98>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <spi1_config+0x98>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6013      	str	r3, [r2, #0]

	/*Set 8 bit data mode*/
	SPI1->CR1 &= ~(1U<<11);
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <spi1_config+0x98>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <spi1_config+0x98>)
 800030a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800030e:	6013      	str	r3, [r2, #0]

	/*Select SW salve management by
	 * setting SSM=1 and SSi=1*/
	SPI1->CR1 |=(1U<<8);
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <spi1_config+0x98>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <spi1_config+0x98>)
 8000316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800031a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<9);
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <spi1_config+0x98>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a08      	ldr	r2, [pc, #32]	@ (8000344 <spi1_config+0x98>)
 8000322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000326:	6013      	str	r3, [r2, #0]


	/*Enable SPI communicate*/
	SPI1->CR1 |= (1<<6);
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <spi1_config+0x98>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a05      	ldr	r2, [pc, #20]	@ (8000344 <spi1_config+0x98>)
 800032e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000332:	6013      	str	r3, [r2, #0]

}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800
 8000344:	40013000 	.word	0x40013000

08000348 <spi1_transmit>:

void spi1_transmit(uint8_t *data, uint32_t size)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
	uint8_t tmp;

	while(i < size)
 8000356:	e00f      	b.n	8000378 <spi1_transmit+0x30>
	{
		/*Wait until TXE is set*/
		while(!(SPI1->SR & SR_TXE));
 8000358:	bf00      	nop
 800035a:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <spi1_transmit+0x6c>)
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <spi1_transmit+0x12>

		/*write the data to the data register*/
		SPI1->DR = data[i];
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	4413      	add	r3, r2
 800036c:	781a      	ldrb	r2, [r3, #0]
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <spi1_transmit+0x6c>)
 8000370:	60da      	str	r2, [r3, #12]
		i++;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3301      	adds	r3, #1
 8000376:	60fb      	str	r3, [r7, #12]
	while(i < size)
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	d3eb      	bcc.n	8000358 <spi1_transmit+0x10>

	}

	/*Wait until TXE is set*/
	while(!(SPI1->SR & SR_TXE));
 8000380:	bf00      	nop
 8000382:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <spi1_transmit+0x6c>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	f003 0302 	and.w	r3, r3, #2
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <spi1_transmit+0x3a>

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & SR_BSY));
 800038e:	bf00      	nop
 8000390:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <spi1_transmit+0x6c>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000398:	2b00      	cmp	r3, #0
 800039a:	d1f9      	bne.n	8000390 <spi1_transmit+0x48>

	/*Clear OVR flag*/
	tmp = SPI1->DR;
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <spi1_transmit+0x6c>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	72fb      	strb	r3, [r7, #11]
	tmp = SPI1->SR;
 80003a2:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <spi1_transmit+0x6c>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	72fb      	strb	r3, [r7, #11]
}
 80003a8:	bf00      	nop
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40013000 	.word	0x40013000

080003b8 <cs_enable>:
		size--;
	}
}

void cs_enable(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1U<<9);
 80003bc:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <cs_enable+0x1c>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <cs_enable+0x1c>)
 80003c2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80003c6:	6153      	str	r3, [r2, #20]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40020000 	.word	0x40020000

080003d8 <cs_disable>:

void cs_disable(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<9);
 80003dc:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <cs_disable+0x1c>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <cs_disable+0x1c>)
 80003e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003e6:	6153      	str	r3, [r2, #20]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40020000 	.word	0x40020000

080003f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f8:	480d      	ldr	r0, [pc, #52]	@ (8000430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	@ (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	@ (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	@ (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	@ (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000426:	f000 f811 	bl	800044c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042a:	f7ff fed3 	bl	80001d4 <main>

0800042e <LoopForever>:

LoopForever:
  b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   r0, =_estack
 8000430:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800043c:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 8000440:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000444:	2000001c 	.word	0x2000001c

08000448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <__libc_init_array>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4d0d      	ldr	r5, [pc, #52]	@ (8000484 <__libc_init_array+0x38>)
 8000450:	4c0d      	ldr	r4, [pc, #52]	@ (8000488 <__libc_init_array+0x3c>)
 8000452:	1b64      	subs	r4, r4, r5
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	2600      	movs	r6, #0
 8000458:	42a6      	cmp	r6, r4
 800045a:	d109      	bne.n	8000470 <__libc_init_array+0x24>
 800045c:	4d0b      	ldr	r5, [pc, #44]	@ (800048c <__libc_init_array+0x40>)
 800045e:	4c0c      	ldr	r4, [pc, #48]	@ (8000490 <__libc_init_array+0x44>)
 8000460:	f000 f818 	bl	8000494 <_init>
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	10a4      	asrs	r4, r4, #2
 8000468:	2600      	movs	r6, #0
 800046a:	42a6      	cmp	r6, r4
 800046c:	d105      	bne.n	800047a <__libc_init_array+0x2e>
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	f855 3b04 	ldr.w	r3, [r5], #4
 8000474:	4798      	blx	r3
 8000476:	3601      	adds	r6, #1
 8000478:	e7ee      	b.n	8000458 <__libc_init_array+0xc>
 800047a:	f855 3b04 	ldr.w	r3, [r5], #4
 800047e:	4798      	blx	r3
 8000480:	3601      	adds	r6, #1
 8000482:	e7f2      	b.n	800046a <__libc_init_array+0x1e>
 8000484:	080004b0 	.word	0x080004b0
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b4 	.word	0x080004b4

08000494 <_init>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr

080004a0 <_fini>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr
