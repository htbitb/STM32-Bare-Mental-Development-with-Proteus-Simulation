
6_SPI_sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006ac  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000840  08000840  00001840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800084c  0800084c  0000185c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800084c  0800084c  0000184c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000854  0800085c  0000185c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000854  08000854  00001854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000858  08000858  00001858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000185c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800085c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800085c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000139a  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003e1  00000000  00000000  00002c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  00003008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ce  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f1d  00000000  00000000  000031fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001553  00000000  00000000  0000511b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000088ac  00000000  00000000  0000666e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ef1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003e8  00000000  00000000  0000ef60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0000f348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000828 	.word	0x08000828

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000828 	.word	0x08000828

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
#include <stm32f40xx.h>
#include <string.h>

int main()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b08a      	sub	sp, #40	@ 0x28
 80001e8:	af00      	add	r7, sp, #0
	/**
//	 * GPIO clock peripheral enable
//	 * */
//	GPIO_PeriClockControl(GPIO_A, ENABLE);
	GPIO_PeriClockControl(GPIO_B, ENABLE);
 80001ea:	2101      	movs	r1, #1
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 f95f 	bl	80004b0 <GPIO_PeriClockControl>
////	 pGPIOA.GPIO_PmapConfig.GPIO_PinAltFunMode = 5;
//
//
//	 GPIO_init(GPIO_A, &pGPIOA);

	pGPIOB.pGPIOx = GPIOB;
 80001f2:	4b29      	ldr	r3, [pc, #164]	@ (8000298 <main+0xb4>)
 80001f4:	61fb      	str	r3, [r7, #28]
	pGPIOB.GPIO_PmapConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f6:	2302      	movs	r3, #2
 80001f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	pGPIOB.GPIO_PmapConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001fc:	2300      	movs	r3, #0
 80001fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	pGPIOB.GPIO_PmapConfig.GPIO_PinAltFunMode = 5;
 8000202:	2305      	movs	r3, #5
 8000204:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25


	pGPIOB.GPIO_PmapConfig.GPIO_PinNumber = GPIO_PIN15;
 8000208:	230f      	movs	r3, #15
 800020a:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_init(GPIO_B, &pGPIOB);
 800020e:	f107 031c 	add.w	r3, r7, #28
 8000212:	4619      	mov	r1, r3
 8000214:	2001      	movs	r0, #1
 8000216:	f000 f967 	bl	80004e8 <GPIO_init>

	pGPIOB.GPIO_PmapConfig.GPIO_PinNumber = GPIO_PIN13;
 800021a:	230d      	movs	r3, #13
 800021c:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_init(GPIO_B, &pGPIOB);
 8000220:	f107 031c 	add.w	r3, r7, #28
 8000224:	4619      	mov	r1, r3
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f95e 	bl	80004e8 <GPIO_init>


	/**
	 * SPI clock
	 */
	SPIx_PeriClockControl(SPI_2, ENABLE);
 800022c:	2101      	movs	r1, #1
 800022e:	200e      	movs	r0, #14
 8000230:	f000 f84e 	bl	80002d0 <SPIx_PeriClockControl>
	SPI_PeripheralControl(SPI2, ENABLE);
 8000234:	2101      	movs	r1, #1
 8000236:	4819      	ldr	r0, [pc, #100]	@ (800029c <main+0xb8>)
 8000238:	f000 f901 	bl	800043e <SPI_PeripheralControl>
	 * SPI inits
	 */

	SPI_Handle_tp SPI1handle;

	SPI1handle.pSPIx = SPI2;
 800023c:	4b17      	ldr	r3, [pc, #92]	@ (800029c <main+0xb8>)
 800023e:	613b      	str	r3, [r7, #16]
	SPI1handle.SPIConf.SPI_BusConfig = SPI_BUS_CFG_FD;
 8000240:	2301      	movs	r3, #1
 8000242:	757b      	strb	r3, [r7, #21]
	SPI1handle.SPIConf.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000244:	2301      	movs	r3, #1
 8000246:	753b      	strb	r3, [r7, #20]
	SPI1handle.SPIConf.SPI_SCLKSpeed = SPI_SCLK_SPEED_DIV2;
 8000248:	2300      	movs	r3, #0
 800024a:	75bb      	strb	r3, [r7, #22]
	SPI1handle.SPIConf.SPI_DFF = SPI_DFF_8BITS;
 800024c:	2300      	movs	r3, #0
 800024e:	75fb      	strb	r3, [r7, #23]
	SPI1handle.SPIConf.SPI_CPOL = SPI_CPOL_LOW;
 8000250:	2300      	movs	r3, #0
 8000252:	763b      	strb	r3, [r7, #24]
	SPI1handle.SPIConf.SPI_CPHA = SPI_CPHA_LOW;
 8000254:	2300      	movs	r3, #0
 8000256:	767b      	strb	r3, [r7, #25]
	SPI1handle.SPIConf.SPI_SSM = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	76bb      	strb	r3, [r7, #26]

	SPIx_init(SPI_2, &SPI1handle);
 800025c:	f107 0310 	add.w	r3, r7, #16
 8000260:	4619      	mov	r1, r3
 8000262:	200e      	movs	r0, #14
 8000264:	f000 f860 	bl	8000328 <SPIx_init>
	SPI_SSIConfig(SPI2, ENABLE);
 8000268:	2101      	movs	r1, #1
 800026a:	480c      	ldr	r0, [pc, #48]	@ (800029c <main+0xb8>)
 800026c:	f000 f903 	bl	8000476 <SPI_SSIConfig>

	char user_data[] = "Hello World";
 8000270:	4a0b      	ldr	r2, [pc, #44]	@ (80002a0 <main+0xbc>)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	ca07      	ldmia	r2, {r0, r1, r2}
 8000276:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI1->DR = 10;
 800027a:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <main+0xc0>)
 800027c:	220a      	movs	r2, #10
 800027e:	60da      	str	r2, [r3, #12]

	SPI_DataTransfer(SPI1, (U08*)user_data, strlen(user_data));
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ffa6 	bl	80001d4 <strlen>
 8000288:	4602      	mov	r2, r0
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <main+0xc0>)
 8000290:	f000 f89e 	bl	80003d0 <SPI_DataTransfer>

	while(1);
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <main+0xb0>
 8000298:	40020400 	.word	0x40020400
 800029c:	40003800 	.word	0x40003800
 80002a0:	08000840 	.word	0x08000840
 80002a4:	40013000 	.word	0x40013000

080002a8 <SPI_GetFlagStatus>:
#include <stm32f40xx_SPI_driver.h>



U08 SPI_GetFlagStatus(SPI_TypeDef* pSPIx, U32 FlagName)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
    if(pSPIx->SR & FlagName)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	4013      	ands	r3, r2
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SPI_GetFlagStatus+0x1a>
    {
        return FLAG_SET;
 80002be:	2301      	movs	r3, #1
 80002c0:	e000      	b.n	80002c4 <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <SPIx_PeriClockControl>:

 /**
  * Peripheral clock setup
  */
void SPIx_PeriClockControl(U08 SPIx, U08 EnorDis)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
    if (EnorDis == ENABLE)
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d118      	bne.n	8000318 <SPIx_PeriClockControl+0x48>
    {
        SPIx_PCLOCK_EN(SPIx);
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b0c      	cmp	r3, #12
 80002ea:	d002      	beq.n	80002f2 <SPIx_PeriClockControl+0x22>
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b0d      	cmp	r3, #13
 80002f0:	d109      	bne.n	8000306 <SPIx_PeriClockControl+0x36>
 80002f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <SPIx_PeriClockControl+0x54>)
 80002f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2101      	movs	r1, #1
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	4909      	ldr	r1, [pc, #36]	@ (8000324 <SPIx_PeriClockControl+0x54>)
 8000300:	4313      	orrs	r3, r2
 8000302:	644b      	str	r3, [r1, #68]	@ 0x44
    }
    else
    {
        // do nothing
    }
}
 8000304:	e008      	b.n	8000318 <SPIx_PeriClockControl+0x48>
        SPIx_PCLOCK_EN(SPIx);
 8000306:	4b07      	ldr	r3, [pc, #28]	@ (8000324 <SPIx_PeriClockControl+0x54>)
 8000308:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2101      	movs	r1, #1
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	4904      	ldr	r1, [pc, #16]	@ (8000324 <SPIx_PeriClockControl+0x54>)
 8000314:	4313      	orrs	r3, r2
 8000316:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40023800 	.word	0x40023800

08000328 <SPIx_init>:

/**
 * Init and De-init
 */
void SPIx_init(U08 SPIx, SPI_Handle_tp* pSPIHandle)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]
    U32 tempreg = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
    /* First configure the SPI_CR1 register*/
    /* Configure the device mode*/
    tempreg |= pSPIHandle->SPIConf.SPI_DeviceMode << CR1_MSTR;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

    /* Configure the bus cfg*/
    if (pSPIHandle->SPIConf.SPI_BusConfig == SPI_BUS_CFG_FD)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	795b      	ldrb	r3, [r3, #5]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d104      	bne.n	8000356 <SPIx_init+0x2e>
    {
        tempreg &= ~(1 << CR1_BIDI_MODE);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e014      	b.n	8000380 <SPIx_init+0x58>
    }
    else if (pSPIHandle->SPIConf.SPI_BusConfig == SPI_BUS_CFG_HD)
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	795b      	ldrb	r3, [r3, #5]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d104      	bne.n	8000368 <SPIx_init+0x40>
    {
        tempreg |= (1 << CR1_BIDI_MODE);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	e00b      	b.n	8000380 <SPIx_init+0x58>
    }

    else if (pSPIHandle->SPIConf.SPI_BusConfig == SPI_BUS_CFG_SP_RXONLY)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	795b      	ldrb	r3, [r3, #5]
 800036c:	2b03      	cmp	r3, #3
 800036e:	d107      	bne.n	8000380 <SPIx_init+0x58>
    {
        tempreg &= ~(1 << CR1_BIDI_MODE);
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000376:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << CR1_RX_ONLY);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800037e:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConf.SPI_SCLKSpeed << CR1_BR;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	799b      	ldrb	r3, [r3, #6]
 8000384:	00db      	lsls	r3, r3, #3
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	4313      	orrs	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConf.SPI_DFF << CR1_DFF;
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	79db      	ldrb	r3, [r3, #7]
 8000390:	02db      	lsls	r3, r3, #11
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	4313      	orrs	r3, r2
 8000396:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConf.SPI_CPOL << CR1_CPOL;
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	7a1b      	ldrb	r3, [r3, #8]
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	68fa      	ldr	r2, [r7, #12]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConf.SPI_CPHA << CR1_CPHA;
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	7a5b      	ldrb	r3, [r3, #9]
 80003a8:	461a      	mov	r2, r3
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConf.SPI_SSM << CR1_SSM;
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	7a9b      	ldrb	r3, [r3, #10]
 80003b4:	025b      	lsls	r3, r3, #9
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	601a      	str	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <SPI_DataTransfer>:

/**
 * Data Send and Receive
 */
void SPI_DataTransfer(SPI_TypeDef* pSPIx, U08 *pTxBuffer, U32 len)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
    while(len > 0)
 80003dc:	e027      	b.n	800042e <SPI_DataTransfer+0x5e>
    {
        //1. wait until TXE is set
        while (SPI_GetFlagStatus(pSPIx, SPI_FLAG_TXE) == RESET);
 80003de:	bf00      	nop
 80003e0:	2102      	movs	r1, #2
 80003e2:	68f8      	ldr	r0, [r7, #12]
 80003e4:	f7ff ff60 	bl	80002a8 <SPI_GetFlagStatus>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f8      	beq.n	80003e0 <SPI_DataTransfer+0x10>

        //2. Check the DFF bit in the DR
        if (pSPIx->CR1 & (1U << CR1_DFF))
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d00e      	beq.n	8000418 <SPI_DataTransfer+0x48>
        {
            //16 bits
            pSPIx->DR = *((U16*)pTxBuffer);
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	461a      	mov	r2, r3
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	60da      	str	r2, [r3, #12]
            len--;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	607b      	str	r3, [r7, #4]
			len--;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3b01      	subs	r3, #1
 800040e:	607b      	str	r3, [r7, #4]
			(U16*)pTxBuffer++;
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3301      	adds	r3, #1
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	e00a      	b.n	800042e <SPI_DataTransfer+0x5e>
        }
        else
        {
            pSPIx->DR = *(pTxBuffer);
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	60da      	str	r2, [r3, #12]
            len--;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3b01      	subs	r3, #1
 8000426:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	3301      	adds	r3, #1
 800042c:	60bb      	str	r3, [r7, #8]
    while(len > 0)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1d4      	bne.n	80003de <SPI_DataTransfer+0xe>
        }
    }
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_TypeDef* pSPIx, U08 EnorDis)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	460b      	mov	r3, r1
 8000448:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == ENABLE)
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d106      	bne.n	800045e <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << CR1_SPE);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	601a      	str	r2, [r3, #0]
	}
    else
    {
        pSPIx->CR1 &= ~(1 << CR1_SPE);
    }
}
 800045c:	e005      	b.n	800046a <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << CR1_SPE);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <SPI_SSIConfig>:

void  SPI_SSIConfig(SPI_TypeDef *pSPIx, U08 EnOrDi)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	460b      	mov	r3, r1
 8000480:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000482:	78fb      	ldrb	r3, [r7, #3]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d106      	bne.n	8000496 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << CR1_SSI);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << CR1_SSI);
	}


}
 8000494:	e005      	b.n	80004a2 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << CR1_SSI);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <GPIO_PeriClockControl>:

 /**
  * Perpheral clock setup
  */
 void GPIO_PeriClockControl(U08 pGPIOx, U08 EnorDis)
 {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	460a      	mov	r2, r1
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	4613      	mov	r3, r2
 80004be:	71bb      	strb	r3, [r7, #6]
    if(EnorDis == ENABLE)
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d108      	bne.n	80004d8 <GPIO_PeriClockControl+0x28>
    {
        GPIOx_PCLOCK_EN(pGPIOx);
 80004c6:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <GPIO_PeriClockControl+0x34>)
 80004c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2101      	movs	r1, #1
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	4904      	ldr	r1, [pc, #16]	@ (80004e4 <GPIO_PeriClockControl+0x34>)
 80004d4:	4313      	orrs	r3, r2
 80004d6:	630b      	str	r3, [r1, #48]	@ 0x30
    }
    else
    {
    	//do nothing
    }
 }
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40023800 	.word	0x40023800

080004e8 <GPIO_init>:

/**
 * Init and De-init
 */
void GPIO_init(U08 pGPIOx, GPIO_Handle* pGPIOHandle)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	71fb      	strb	r3, [r7, #7]
    U32 tdata = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
    U08 temp_val[2] = {0, };
 80004f8:	2300      	movs	r3, #0
 80004fa:	813b      	strh	r3, [r7, #8]
    
    /*1. Configure the mode of gpio pin*/
    if(pGPIOHandle->GPIO_PmapConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	2b03      	cmp	r3, #3
 8000502:	d81f      	bhi.n	8000544 <GPIO_init+0x5c>
    {
        tdata = (pGPIOHandle->GPIO_PmapConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber));
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	461a      	mov	r2, r3
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &=~(0x3 << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	4619      	mov	r1, r3
 8000522:	2303      	movs	r3, #3
 8000524:	408b      	lsls	r3, r1
 8000526:	43db      	mvns	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	400a      	ands	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= tdata;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6819      	ldr	r1, [r3, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	e070      	b.n	8000626 <GPIO_init+0x13e>
    }
    else
    {
        /* GPIO Interrupt handler*/
        if(pGPIOHandle->GPIO_PmapConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	2b04      	cmp	r3, #4
 800054a:	d115      	bne.n	8000578 <GPIO_init+0x90>
        {
            /*1. Configure the FTSR*/
            EXTI->FTSR |= (1U << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 800054c:	4b8c      	ldr	r3, [pc, #560]	@ (8000780 <GPIO_init+0x298>)
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	4619      	mov	r1, r3
 8000556:	2301      	movs	r3, #1
 8000558:	408b      	lsls	r3, r1
 800055a:	4989      	ldr	r1, [pc, #548]	@ (8000780 <GPIO_init+0x298>)
 800055c:	4313      	orrs	r3, r2
 800055e:	60cb      	str	r3, [r1, #12]

            /* Clear the corresponding RTSR bit for secure*/
            EXTI->RTSR &= ~(1U << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 8000560:	4b87      	ldr	r3, [pc, #540]	@ (8000780 <GPIO_init+0x298>)
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	4619      	mov	r1, r3
 800056a:	2301      	movs	r3, #1
 800056c:	408b      	lsls	r3, r1
 800056e:	43db      	mvns	r3, r3
 8000570:	4983      	ldr	r1, [pc, #524]	@ (8000780 <GPIO_init+0x298>)
 8000572:	4013      	ands	r3, r2
 8000574:	608b      	str	r3, [r1, #8]
 8000576:	e031      	b.n	80005dc <GPIO_init+0xf4>
        }
        else if (pGPIOHandle->GPIO_PmapConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b05      	cmp	r3, #5
 800057e:	d115      	bne.n	80005ac <GPIO_init+0xc4>
        {
            /* Configure the RTST */
            EXTI->RTSR |= (1U << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 8000580:	4b7f      	ldr	r3, [pc, #508]	@ (8000780 <GPIO_init+0x298>)
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	4619      	mov	r1, r3
 800058a:	2301      	movs	r3, #1
 800058c:	408b      	lsls	r3, r1
 800058e:	497c      	ldr	r1, [pc, #496]	@ (8000780 <GPIO_init+0x298>)
 8000590:	4313      	orrs	r3, r2
 8000592:	608b      	str	r3, [r1, #8]

            /* Clear the corresponding RTSR bit for secure*/
            EXTI->FTSR &= ~(1U << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 8000594:	4b7a      	ldr	r3, [pc, #488]	@ (8000780 <GPIO_init+0x298>)
 8000596:	68da      	ldr	r2, [r3, #12]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	4619      	mov	r1, r3
 800059e:	2301      	movs	r3, #1
 80005a0:	408b      	lsls	r3, r1
 80005a2:	43db      	mvns	r3, r3
 80005a4:	4976      	ldr	r1, [pc, #472]	@ (8000780 <GPIO_init+0x298>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	60cb      	str	r3, [r1, #12]
 80005aa:	e017      	b.n	80005dc <GPIO_init+0xf4>
        }
        else if (pGPIOHandle->GPIO_PmapConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	2b06      	cmp	r3, #6
 80005b2:	d113      	bne.n	80005dc <GPIO_init+0xf4>
        {
            /*C Configure both FTSR and RTST*/
            EXTI->RTSR |= (1U << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 80005b4:	4b72      	ldr	r3, [pc, #456]	@ (8000780 <GPIO_init+0x298>)
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	4619      	mov	r1, r3
 80005be:	2301      	movs	r3, #1
 80005c0:	408b      	lsls	r3, r1
 80005c2:	496f      	ldr	r1, [pc, #444]	@ (8000780 <GPIO_init+0x298>)
 80005c4:	4313      	orrs	r3, r2
 80005c6:	608b      	str	r3, [r1, #8]

            EXTI->FTSR |= (1U << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 80005c8:	4b6d      	ldr	r3, [pc, #436]	@ (8000780 <GPIO_init+0x298>)
 80005ca:	68da      	ldr	r2, [r3, #12]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	4619      	mov	r1, r3
 80005d2:	2301      	movs	r3, #1
 80005d4:	408b      	lsls	r3, r1
 80005d6:	496a      	ldr	r1, [pc, #424]	@ (8000780 <GPIO_init+0x298>)
 80005d8:	4313      	orrs	r3, r2
 80005da:	60cb      	str	r3, [r1, #12]

        }

        /* Configure the GPIO port selection in SYSCFG_EXTICR */
        SYSCGF_PCLK_EN();
 80005dc:	4b69      	ldr	r3, [pc, #420]	@ (8000784 <GPIO_init+0x29c>)
 80005de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e0:	4a68      	ldr	r2, [pc, #416]	@ (8000784 <GPIO_init+0x29c>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6453      	str	r3, [r2, #68]	@ 0x44

        temp_val[0] = pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber / 4;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	089b      	lsrs	r3, r3, #2
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
        temp_val[1] = pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber % 4;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	f003 0303 	and.w	r3, r3, #3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	727b      	strb	r3, [r7, #9]

        SYS_CFG->EXTICR[temp_val[0]] = pGPIOx << (temp_val[1] * 4);
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	7a7b      	ldrb	r3, [r7, #9]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	fa02 f103 	lsl.w	r1, r2, r3
 8000608:	4a5f      	ldr	r2, [pc, #380]	@ (8000788 <GPIO_init+0x2a0>)
 800060a:	7a3b      	ldrb	r3, [r7, #8]
 800060c:	3302      	adds	r3, #2
 800060e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        /* Enable the exti interrupt delivery using IMR*/
        EXTI->IMR |= (1U << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 8000612:	4b5b      	ldr	r3, [pc, #364]	@ (8000780 <GPIO_init+0x298>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	4619      	mov	r1, r3
 800061c:	2301      	movs	r3, #1
 800061e:	408b      	lsls	r3, r1
 8000620:	4957      	ldr	r1, [pc, #348]	@ (8000780 <GPIO_init+0x298>)
 8000622:	4313      	orrs	r3, r2
 8000624:	600b      	str	r3, [r1, #0]
        
    }

    /*2. COnfigure the speed*/
    tdata = ((pGPIOHandle->GPIO_PmapConfig.GPIO_PinSpeed) << (2 * pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber));
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	799b      	ldrb	r3, [r3, #6]
 800062a:	461a      	mov	r2, r3
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &=~(0x3 << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	4619      	mov	r1, r3
 8000644:	2303      	movs	r3, #3
 8000646:	408b      	lsls	r3, r1
 8000648:	43db      	mvns	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	400a      	ands	r2, r1
 8000652:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= tdata;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6899      	ldr	r1, [r3, #8]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	430a      	orrs	r2, r1
 8000662:	609a      	str	r2, [r3, #8]

    /*3. Configure the pupd settings*/
    tdata = ((pGPIOHandle->GPIO_PmapConfig.GPIO_PinPuPdControl) << (2 * pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber));
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	79db      	ldrb	r3, [r3, #7]
 8000668:	461a      	mov	r2, r3
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &=~(0x3 << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	4619      	mov	r1, r3
 8000682:	2303      	movs	r3, #3
 8000684:	408b      	lsls	r3, r1
 8000686:	43db      	mvns	r3, r3
 8000688:	4619      	mov	r1, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	400a      	ands	r2, r1
 8000690:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= tdata;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68d9      	ldr	r1, [r3, #12]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	430a      	orrs	r2, r1
 80006a0:	60da      	str	r2, [r3, #12]

    /*4. Configure the optype*/
    tdata = ((pGPIOHandle->GPIO_PmapConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber));
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	7a1b      	ldrb	r3, [r3, #8]
 80006a6:	461a      	mov	r2, r3
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &=~(0x1 << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	2301      	movs	r3, #1
 80006c0:	408b      	lsls	r3, r1
 80006c2:	43db      	mvns	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	400a      	ands	r2, r1
 80006cc:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= tdata;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6859      	ldr	r1, [r3, #4]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	430a      	orrs	r2, r1
 80006dc:	605a      	str	r2, [r3, #4]

    /*5. configure the alternate function*/
    if(pGPIOHandle->GPIO_PmapConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	795b      	ldrb	r3, [r3, #5]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d146      	bne.n	8000774 <GPIO_init+0x28c>
    {
        if(pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber <= GPIO_PIN7)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	d81f      	bhi.n	800072e <GPIO_init+0x246>
        {
            tdata = ((pGPIOHandle->GPIO_PmapConfig.GPIO_PinAltFunMode) << (4 * pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber));
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	7a5b      	ldrb	r3, [r3, #9]
 80006f2:	461a      	mov	r2, r3
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->pGPIOx->AFRL &=~(0xF << pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6a1a      	ldr	r2, [r3, #32]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	4619      	mov	r1, r3
 800070c:	230f      	movs	r3, #15
 800070e:	408b      	lsls	r3, r1
 8000710:	43db      	mvns	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	621a      	str	r2, [r3, #32]
            pGPIOHandle->pGPIOx->AFRL |= tdata;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a19      	ldr	r1, [r3, #32]
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	430a      	orrs	r2, r1
 800072a:	621a      	str	r2, [r3, #32]
            pGPIOHandle->pGPIOx->AFRH &=~(0xF << ((pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber % 4)));
            pGPIOHandle->pGPIOx->AFRH |= tdata;
        }
    }

}
 800072c:	e022      	b.n	8000774 <GPIO_init+0x28c>
            tdata = ((pGPIOHandle->GPIO_PmapConfig.GPIO_PinAltFunMode) << (4 * (pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber % 4)));
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	7a5b      	ldrb	r3, [r3, #9]
 8000732:	461a      	mov	r2, r3
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	f003 0303 	and.w	r3, r3, #3
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->pGPIOx->AFRH &=~(0xF << ((pGPIOHandle->GPIO_PmapConfig.GPIO_PinNumber % 4)));
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	f003 0303 	and.w	r3, r3, #3
 8000752:	210f      	movs	r1, #15
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	43db      	mvns	r3, r3
 800075a:	4619      	mov	r1, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	400a      	ands	r2, r1
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->pGPIOx->AFRH |= tdata;
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	430a      	orrs	r2, r1
 8000772:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40013c00 	.word	0x40013c00
 8000784:	40023800 	.word	0x40023800
 8000788:	40013800 	.word	0x40013800

0800078c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800078c:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000790:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000796:	490d      	ldr	r1, [pc, #52]	@ (80007cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000798:	4a0d      	ldr	r2, [pc, #52]	@ (80007d0 <LoopForever+0xe>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ac:	4c0a      	ldr	r4, [pc, #40]	@ (80007d8 <LoopForever+0x16>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ba:	f000 f811 	bl	80007e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007be:	f7ff fd11 	bl	80001e4 <main>

080007c2 <LoopForever>:

LoopForever:
  b LoopForever
 80007c2:	e7fe      	b.n	80007c2 <LoopForever>
  ldr   r0, =_estack
 80007c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007d0:	0800085c 	.word	0x0800085c
  ldr r2, =_sbss
 80007d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007d8:	2000001c 	.word	0x2000001c

080007dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC_IRQHandler>
	...

080007e0 <__libc_init_array>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000818 <__libc_init_array+0x38>)
 80007e4:	4c0d      	ldr	r4, [pc, #52]	@ (800081c <__libc_init_array+0x3c>)
 80007e6:	1b64      	subs	r4, r4, r5
 80007e8:	10a4      	asrs	r4, r4, #2
 80007ea:	2600      	movs	r6, #0
 80007ec:	42a6      	cmp	r6, r4
 80007ee:	d109      	bne.n	8000804 <__libc_init_array+0x24>
 80007f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000820 <__libc_init_array+0x40>)
 80007f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000824 <__libc_init_array+0x44>)
 80007f4:	f000 f818 	bl	8000828 <_init>
 80007f8:	1b64      	subs	r4, r4, r5
 80007fa:	10a4      	asrs	r4, r4, #2
 80007fc:	2600      	movs	r6, #0
 80007fe:	42a6      	cmp	r6, r4
 8000800:	d105      	bne.n	800080e <__libc_init_array+0x2e>
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f855 3b04 	ldr.w	r3, [r5], #4
 8000808:	4798      	blx	r3
 800080a:	3601      	adds	r6, #1
 800080c:	e7ee      	b.n	80007ec <__libc_init_array+0xc>
 800080e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000812:	4798      	blx	r3
 8000814:	3601      	adds	r6, #1
 8000816:	e7f2      	b.n	80007fe <__libc_init_array+0x1e>
 8000818:	08000854 	.word	0x08000854
 800081c:	08000854 	.word	0x08000854
 8000820:	08000854 	.word	0x08000854
 8000824:	08000858 	.word	0x08000858

08000828 <_init>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	bf00      	nop
 800082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082e:	bc08      	pop	{r3}
 8000830:	469e      	mov	lr, r3
 8000832:	4770      	bx	lr

08000834 <_fini>:
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	bf00      	nop
 8000838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083a:	bc08      	pop	{r3}
 800083c:	469e      	mov	lr, r3
 800083e:	4770      	bx	lr
