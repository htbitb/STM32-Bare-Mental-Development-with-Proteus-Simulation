
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000414  08000414  0000141c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000414  08000414  0000141c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800041c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800041c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005cc  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001cc  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005c  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dca1  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ef1  00000000  00000000  0000f96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f8cc  00000000  00000000  0001085e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006012a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000012c  00000000  00000000  00060170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0006029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f8 	.word	0x080003f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003f8 	.word	0x080003f8

080001d4 <i2c_init>:
#define SR1_TXE			(1U<<7)
#define SR1_RXNE		(1U<<6)
#define SR1_BTF			(1U<<2)

void i2c_init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	/*Enable GPIOB clock access*/
	RCC->AHB1ENR |= (1U<<1);
 80001d8:	4b33      	ldr	r3, [pc, #204]	@ (80002a8 <i2c_init+0xd4>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a32      	ldr	r2, [pc, #200]	@ (80002a8 <i2c_init+0xd4>)
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Cofigure GPIOB PB8 as SCL*/
	GPIOB->MODER &= ~(1U<<16);
 80001e4:	4b31      	ldr	r3, [pc, #196]	@ (80002ac <i2c_init+0xd8>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a30      	ldr	r2, [pc, #192]	@ (80002ac <i2c_init+0xd8>)
 80001ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 80001f0:	4b2e      	ldr	r3, [pc, #184]	@ (80002ac <i2c_init+0xd8>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a2d      	ldr	r2, [pc, #180]	@ (80002ac <i2c_init+0xd8>)
 80001f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001fa:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] |= (1U<<1); // alternate function to SCL
 80001fc:	4b2b      	ldr	r3, [pc, #172]	@ (80002ac <i2c_init+0xd8>)
 80001fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000200:	4a2a      	ldr	r2, [pc, #168]	@ (80002ac <i2c_init+0xd8>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->OTYPER |= (1U<<8); //output type open drain
 8000208:	4b28      	ldr	r3, [pc, #160]	@ (80002ac <i2c_init+0xd8>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a27      	ldr	r2, [pc, #156]	@ (80002ac <i2c_init+0xd8>)
 800020e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000212:	6053      	str	r3, [r2, #4]

	GPIOB->PUPDR |= (1U<<16); //Pull up
 8000214:	4b25      	ldr	r3, [pc, #148]	@ (80002ac <i2c_init+0xd8>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a24      	ldr	r2, [pc, #144]	@ (80002ac <i2c_init+0xd8>)
 800021a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800021e:	60d3      	str	r3, [r2, #12]

	/*Configure GPIOB PB9 as SDA*/
    GPIOB->MODER &= ~(1U<<18);
 8000220:	4b22      	ldr	r3, [pc, #136]	@ (80002ac <i2c_init+0xd8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a21      	ldr	r2, [pc, #132]	@ (80002ac <i2c_init+0xd8>)
 8000226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 800022c:	4b1f      	ldr	r3, [pc, #124]	@ (80002ac <i2c_init+0xd8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1e      	ldr	r2, [pc, #120]	@ (80002ac <i2c_init+0xd8>)
 8000232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000236:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] |= (1U<<5); //alternate function to SDA
 8000238:	4b1c      	ldr	r3, [pc, #112]	@ (80002ac <i2c_init+0xd8>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800023c:	4a1b      	ldr	r2, [pc, #108]	@ (80002ac <i2c_init+0xd8>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->OTYPER |= (1U<<9); //output type open drain
 8000244:	4b19      	ldr	r3, [pc, #100]	@ (80002ac <i2c_init+0xd8>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a18      	ldr	r2, [pc, #96]	@ (80002ac <i2c_init+0xd8>)
 800024a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800024e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR |= (1U<<18); //Pull up
 8000250:	4b16      	ldr	r3, [pc, #88]	@ (80002ac <i2c_init+0xd8>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a15      	ldr	r2, [pc, #84]	@ (80002ac <i2c_init+0xd8>)
 8000256:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800025a:	60d3      	str	r3, [r2, #12]

	/**Enable clock access to I2C1*/
	RCC->APB1ENR |= (1U<<21);
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <i2c_init+0xd4>)
 800025e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000260:	4a11      	ldr	r2, [pc, #68]	@ (80002a8 <i2c_init+0xd4>)
 8000262:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000266:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Enable reset mode*/
	I2C1->CR1 |= (1U<<15);
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <i2c_init+0xdc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a10      	ldr	r2, [pc, #64]	@ (80002b0 <i2c_init+0xdc>)
 800026e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000272:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode*/
	I2C1->CR1 &= ~(1U<<15);
 8000274:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <i2c_init+0xdc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <i2c_init+0xdc>)
 800027a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800027e:	6013      	str	r3, [r2, #0]

	/*Set peripheral clock frequence*/
	I2C1->CR2 = (1U<<4); // 16 Mhz
 8000280:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <i2c_init+0xdc>)
 8000282:	2210      	movs	r2, #16
 8000284:	605a      	str	r2, [r3, #4]

	/*I2C to standard mode, 100kHz clock*/
	I2C1->CCR = 80;
 8000286:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <i2c_init+0xdc>)
 8000288:	2250      	movs	r2, #80	@ 0x50
 800028a:	61da      	str	r2, [r3, #28]

	I2C1->TRISE = 17;
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <i2c_init+0xdc>)
 800028e:	2211      	movs	r2, #17
 8000290:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= (1U<<0); //enable PE
 8000292:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <i2c_init+0xdc>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a06      	ldr	r2, [pc, #24]	@ (80002b0 <i2c_init+0xdc>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6013      	str	r3, [r2, #0]

}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020400 	.word	0x40020400
 80002b0:	40005400 	.word	0x40005400

080002b4 <i2c_byteWrite>:
	*data++ = I2C1->DR;

}

void i2c_byteWrite(char sadrr, char* data)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
	volatile int tmp;

	/*Check busy flag*/
	while(!(I2C1->SR2 & SR2_BUSY));
 80002c0:	bf00      	nop
 80002c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000338 <i2c_byteWrite+0x84>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <i2c_byteWrite+0xe>

	/*generate start condition	 */
	I2C1->CR1 |= CR1_START;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000338 <i2c_byteWrite+0x84>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a19      	ldr	r2, [pc, #100]	@ (8000338 <i2c_byteWrite+0x84>)
 80002d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002d8:	6013      	str	r3, [r2, #0]

	/*Wait until start flag is set*/
	while(!(I2C1->SR1 & SR1_SB));
 80002da:	bf00      	nop
 80002dc:	4b16      	ldr	r3, [pc, #88]	@ (8000338 <i2c_byteWrite+0x84>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f9      	beq.n	80002dc <i2c_byteWrite+0x28>

	/*Transmit slave address + write*/
	I2C1->DR = sadrr << 1;
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4a13      	ldr	r2, [pc, #76]	@ (8000338 <i2c_byteWrite+0x84>)
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	6113      	str	r3, [r2, #16]

	/*Wait until addr flag is set*/
	while(!(I2C1->SR1 & SR1_ADDR));
 80002f0:	bf00      	nop
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <i2c_byteWrite+0x84>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f003 0302 	and.w	r3, r3, #2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <i2c_byteWrite+0x3e>

	tmp = I2C1->SR2;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <i2c_byteWrite+0x84>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	60fb      	str	r3, [r7, #12]

	/*Wait until transmitter empty*/
	while(!(I2C1->SR1 & SR1_TXE));
 8000304:	bf00      	nop
 8000306:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <i2c_byteWrite+0x84>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <i2c_byteWrite+0x52>

	I2C1->CR1 |=CR1_STOP;
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <i2c_byteWrite+0x84>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a08      	ldr	r2, [pc, #32]	@ (8000338 <i2c_byteWrite+0x84>)
 8000318:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800031c:	6013      	str	r3, [r2, #0]

	*data++ = I2C1->DR;
 800031e:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <i2c_byteWrite+0x84>)
 8000320:	6919      	ldr	r1, [r3, #16]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	1c5a      	adds	r2, r3, #1
 8000326:	603a      	str	r2, [r7, #0]
 8000328:	b2ca      	uxtb	r2, r1
 800032a:	701a      	strb	r2, [r3, #0]

}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40005400 	.word	0x40005400

0800033c <main>:
#include <stm32f4xx.h>
#include "i2c.h"

int main()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0

	i2c_init();
 8000342:	f7ff ff47 	bl	80001d4 <i2c_init>
	char data = "A";
 8000346:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <main+0x1c>)
 8000348:	b2db      	uxtb	r3, r3
 800034a:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		i2c_byteWrite(0x60, &data);
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	4619      	mov	r1, r3
 8000350:	2060      	movs	r0, #96	@ 0x60
 8000352:	f7ff ffaf 	bl	80002b4 <i2c_byteWrite>
 8000356:	e7f9      	b.n	800034c <main+0x10>
 8000358:	08000410 	.word	0x08000410

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	@ (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	@ (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	@ (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffd5 	bl	800033c <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	2000001c 	.word	0x2000001c

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	@ (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	@ (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	@ (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	@ (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000414 	.word	0x08000414
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000418 	.word	0x08000418

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
